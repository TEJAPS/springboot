Lambda expressions: write code in functional style.
	concise way to implement SAM(single abstract method) interface using expression.
	used to iterate, filter and extract data.
	implement interface which has functional interface.
	we dont define methods, we just write implementation code.
	lambda expression is treater as function hence no .class file is created.
	WHY? - less code.
	SYNTAX - (argument-list) -> {body}
	if paranthesis then return keyword is required, else not.
	
Method references: used to refer method of functional interface. Easy form of lambda expression. replace lambda expression with this.
	types: ref to static method, to instance method, to constructor
	
Functional interfaces: Interface which has only one abstrace method, using optional annotation @FunctionalInterface
	can have any number of default, static methods but contains only one abstract method.
	can declare methods of object class.
	It can contain any number of Object class methods.  
	Can extends another interface only when it does not have any abstract method.
			======================IMPLEMENTATION DONE TILL HERE SO FAR======================
Stream API: util package, consist of classes/interface/enum allowing functionaly style operations on elements.
	does not store elements. simple conveys from source through pipeline of computational operations.
	functional in nature meaning it does not modify source.
	it is lazy and evaluates code only when required.
	each element is visited only once during life of stream.
	Filter, reduce, map, iteration(foreach),collect, count,

Base64 Encode Decode:(exchange of binary data over text based protocols)
	Basic Encoding and Decoding: specified by RFC 4648 and RFC 2045. no line sep character.
	URL and filename Encoding and Decoding: base64 alphabet specified by RFC 4648. no line seperator character
	MIME: base64 alphabet specified in RFC 2045, max 76 chars, uses \r and \n for line seperator.

Default methods: Non abstract methods which are defined inside interface and tagged with default.
	Interface has all abstract methods, but if it wants to define body for some method, it will be using default, and the class implementing it has option to override the same default method again but not mandatory.
	
ForEach() method: start from here : https://www.javatpoint.com/java-8-foreach

Static methods in interface,
Optional class,
Collectors class,
Nashorn JavaScript Engine,
Parallel Array Sorting,
Type and Repating Annotations,
IO Enhancements,
Concurrency Enhancements,
JDBC Enhancements etc.
--------------------------------------------
dependency scope:
> compile - avail @ compile time and run time.
> provided - avail @ compile time. Dependencies that are expected to be provided by runtime env, like tomcat. available at compile time but are not packaged with app jar. ex: servlet -api
> runtime - avail @ only runtime. ex: hibernate core.
> system - same as provided but exact path needs to be provided - tightly coupled with system configuration
> import - used in dependencyManagement to control scope of dependencies brought in by transitive dependencies
> test - 
--------------------------------------------
rajnigandha complex, zoo
